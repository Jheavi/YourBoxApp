{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"E:\\\\Javier\\\\Visual Studio projects\\\\javi-final-project\\\\client\\\\src\\\\components\\\\Workout\\\\Workout.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Calendar } from 'react-native-calendars';\nimport { loadWorkout, updateWorkout } from \"../../redux/actions/workoutActions\";\nimport { todayData } from \"../../utils/dateFunctions\";\nimport PropTypes from 'prop-types';\nvar image = {\n  uri: 'https://images.pexels.com/photos/2261477/pexels-photo-2261477.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n};\nvar height = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexGrow: 1,\n    height: height\n  },\n  scrollContent: {\n    alignItems: 'center',\n    fontFamily: 'Roboto, Open Sans, sans-serif',\n    backgroundColor: '#0d0d0d'\n  },\n  square: {\n    maxWidth: '80%',\n    minWidth: '80%',\n    minHeight: '30%',\n    borderColor: 'white',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    height: 'auto',\n    margin: 30,\n    position: 'relative'\n  },\n  workoutText: {\n    color: 'white',\n    padding: 30,\n    fontSize: 25\n  },\n  image: {\n    resizeMode: 'cover',\n    opacity: 0.4,\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    marginBottom: 'auto',\n    marginTop: 'auto'\n  }\n});\nvar calendarTheme = {\n  textSectionTitleColor: '#cb1313',\n  calendarBackground: 'white',\n  selectedDayBackgroundColor: '#cb1313',\n  textDisabledColor: '#bbbbbb',\n  todayTextColor: '#cb1313',\n  arrowColor: 'white',\n  dayTextColor: 'black',\n  textMonthFontSize: 22,\n  monthTextColor: 'white',\n  textMonthBackground: '#cb1313',\n  'stylesheet.calendar.header': {\n    header: {\n      backgroundColor: '#cb1313',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      paddingLeft: 10,\n      paddingRight: 10,\n      alignItems: 'center'\n    }\n  },\n  'stylesheet.calendar.main': {\n    container: {\n      padding: 0,\n      backgroundColor: '#ffffff'\n    }\n  }\n};\n\nfunction Workout(_ref) {\n  var workout = _ref.workout,\n      dispatch = _ref.dispatch;\n\n  var _useState = useState(workout == null ? void 0 : workout.description),\n      _useState2 = _slicedToArray(_useState, 2),\n      descriptionValue = _useState2[0],\n      setDescriptionValue = _useState2[1];\n\n  var _todayData = todayData(),\n      todayString = _todayData.todayString;\n\n  var _useState3 = useState(todayString),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayedDay = _useState4[0],\n      setDisplayedDay = _useState4[1];\n\n  var noWorkout = 'There is no workout for the selected day';\n  var scrollRef = useRef(null);\n  useEffect(function () {\n    dispatch(loadWorkout(todayString));\n  }, []);\n  useEffect(function () {\n    if (workout) {\n      setDescriptionValue(workout.description);\n    } else {\n      setDescriptionValue(noWorkout);\n    }\n  }, [workout]);\n\n  function scrollToStart() {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({\n        x: 0,\n        y: 0,\n        animated: true\n      });\n    }\n  }\n\n  function onDayPress(day) {\n    dispatch(loadWorkout(day.dateString));\n    setDisplayedDay(day.dateString);\n    scrollToStart();\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.scrollContent,\n    scrollEnabled: true,\n    ref: scrollRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.square,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, React.createElement(ImageBackground, {\n    source: image,\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), React.createElement(TextInput, {\n    multiline: true,\n    style: styles.workoutText,\n    value: descriptionValue,\n    onChangeText: function onChangeText(text) {\n      return setDescriptionValue(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      marginBottom: 30,\n      width: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Save changes\",\n    color: \"#14680c\",\n    onPress: function onPress() {\n      return dispatch(updateWorkout(displayedDay || todayString, descriptionValue));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      marginBottom: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, React.createElement(Calendar, {\n    theme: calendarTheme,\n    firstDay: 1,\n    onDayPress: onDayPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }))));\n}\n\nWorkout.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    workout: state.workoutReducer.workout\n  };\n}\n\nexport default connect(mapStateToProps)(Workout);","map":{"version":3,"sources":["E:/Javier/Visual Studio projects/javi-final-project/client/src/components/Workout/Workout.tsx"],"names":["React","useEffect","useRef","useState","connect","Calendar","loadWorkout","updateWorkout","todayData","PropTypes","image","uri","height","Dimensions","get","styles","StyleSheet","create","container","flex","flexGrow","scrollContent","alignItems","fontFamily","backgroundColor","square","maxWidth","minWidth","minHeight","borderColor","display","justifyContent","borderWidth","margin","position","workoutText","color","padding","fontSize","resizeMode","opacity","width","top","marginBottom","marginTop","calendarTheme","textSectionTitleColor","calendarBackground","selectedDayBackgroundColor","textDisabledColor","todayTextColor","arrowColor","dayTextColor","textMonthFontSize","monthTextColor","textMonthBackground","header","flexDirection","paddingLeft","paddingRight","Workout","workout","dispatch","description","descriptionValue","setDescriptionValue","todayString","displayedDay","setDisplayedDay","noWorkout","scrollRef","scrollToStart","current","scrollTo","x","y","animated","onDayPress","day","dateString","text","propTypes","func","isRequired","mapStateToProps","state","workoutReducer"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { StyleSheet, View, ScrollView, Button, TextInput, ImageBackground, Dimensions } from 'react-native'\r\nimport { Calendar } from 'react-native-calendars'\r\nimport { loadWorkout, updateWorkout } from '../../redux/actions/workoutActions'\r\nimport { todayData } from '../../utils/dateFunctions'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst image = { uri: 'https://images.pexels.com/photos/2261477/pexels-photo-2261477.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940' }\r\nconst height = Dimensions.get('window').height\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexGrow: 1,\r\n    height\r\n  },\r\n  scrollContent: {\r\n    alignItems: 'center',\r\n    fontFamily: 'Roboto, Open Sans, sans-serif',\r\n    backgroundColor: '#0d0d0d'\r\n  },\r\n  square: {\r\n    maxWidth: '80%',\r\n    minWidth: '80%',\r\n    minHeight: '30%',\r\n    borderColor: 'white',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderWidth: 2,\r\n    height: 'auto',\r\n    margin: 30,\r\n    position: 'relative'\r\n  },\r\n  workoutText: {\r\n    color: 'white',\r\n    padding: 30,\r\n    fontSize: 25\r\n  },\r\n  image: {\r\n    resizeMode: 'cover',\r\n    opacity: 0.4,\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    top: 0,\r\n    marginBottom: 'auto',\r\n    marginTop: 'auto'\r\n  }\r\n})\r\n\r\nconst calendarTheme = {\r\n  textSectionTitleColor: '#cb1313',\r\n  calendarBackground: 'white',\r\n  selectedDayBackgroundColor: '#cb1313',\r\n  textDisabledColor: '#bbbbbb',\r\n  todayTextColor: '#cb1313',\r\n  arrowColor: 'white',\r\n  dayTextColor: 'black',\r\n  textMonthFontSize: 22,\r\n  monthTextColor: 'white',\r\n  textMonthBackground: '#cb1313',\r\n  'stylesheet.calendar.header': {\r\n    header: {\r\n      backgroundColor: '#cb1313',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      paddingLeft: 10,\r\n      paddingRight: 10,\r\n      alignItems: 'center'\r\n    }\r\n  },\r\n  'stylesheet.calendar.main': {\r\n    container: {\r\n      padding: 0,\r\n      backgroundColor: '#ffffff'\r\n    }\r\n  }\r\n}\r\n\r\nfunction Workout ({ workout, dispatch }: any) {\r\n  const [descriptionValue, setDescriptionValue] = useState(workout?.description)\r\n  const { todayString } = todayData()\r\n  const [displayedDay, setDisplayedDay] = useState(todayString)\r\n  const noWorkout = 'There is no workout for the selected day'\r\n  const scrollRef = useRef<ScrollView>(null)\r\n\r\n  useEffect(() => {\r\n    dispatch(loadWorkout(todayString))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (workout) {\r\n      setDescriptionValue(workout.description)\r\n    } else {\r\n      setDescriptionValue(noWorkout)\r\n    }\r\n  }, [workout])\r\n\r\n  function scrollToStart () {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTo({\r\n        x: 0,\r\n        y: 0,\r\n        animated: true\r\n      })\r\n    }\r\n  }\r\n\r\n  function onDayPress (day) {\r\n    dispatch(loadWorkout(day.dateString))\r\n    setDisplayedDay(day.dateString)\r\n    scrollToStart()\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ScrollView\r\n        contentContainerStyle={styles.scrollContent}\r\n        scrollEnabled={true}\r\n        ref={scrollRef}\r\n      >\r\n        <View style={styles.square}>\r\n          <ImageBackground source={image} style={styles.image} />\r\n          <TextInput\r\n            multiline={true}\r\n            style={styles.workoutText}\r\n            value={descriptionValue}\r\n            onChangeText={text => setDescriptionValue(text)}\r\n          />\r\n        </View>\r\n        <View style={{ marginBottom: 30, width: 'auto' }}>\r\n          <Button\r\n            title=\"Save changes\"\r\n            color=\"#14680c\"\r\n            onPress={() => dispatch(updateWorkout(\r\n              displayedDay || todayString,\r\n              descriptionValue))}\r\n          />\r\n        </View>\r\n        <View style={{ marginBottom: 30 }}>\r\n          <Calendar\r\n            theme={calendarTheme}\r\n            firstDay={1}\r\n            onDayPress={onDayPress}\r\n          />\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  )\r\n}\r\n\r\nWorkout.propTypes = {\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps (state: any) {\r\n  return {\r\n    workout: state.workoutReducer.workout\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Workout)\r\n"]},"metadata":{},"sourceType":"module"}