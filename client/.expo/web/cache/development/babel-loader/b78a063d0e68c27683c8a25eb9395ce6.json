{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport actionTypes from \"./action-types\";\nimport axios from 'axios';\nimport serverUrls from \"../../constants/serverUrls\";\nexport function loadSchedulesSuccess(schedules) {\n  return {\n    type: actionTypes.LOAD_SCHEDULES,\n    schedules: schedules\n  };\n}\nexport function loadSchedulesError(error) {\n  return {\n    type: actionTypes.LOAD_SCHEDULES_ERROR,\n    error: error\n  };\n}\nexport function loadSchedules() {\n  return function _callee(dispatch) {\n    var _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(serverUrls.scheduleUrl));\n\n          case 3:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            dispatch(loadSchedulesSuccess(data));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(loadSchedulesError(_context.t0));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n}","map":{"version":3,"sources":["E:/Javier/Visual Studio projects/javi-final-project/client/src/redux/actions/schedulesActions.ts"],"names":["actionTypes","axios","serverUrls","loadSchedulesSuccess","schedules","type","LOAD_SCHEDULES","loadSchedulesError","error","LOAD_SCHEDULES_ERROR","loadSchedules","dispatch","get","scheduleUrl","data"],"mappings":";AAAA,OAAOA,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AAMA,OAAO,SAASC,oBAAT,CAA+BC,SAA/B,EAAuE;AAC5E,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACM,cADb;AAELF,IAAAA,SAAS,EAATA;AAFK,GAAP;AAID;AAED,OAAO,SAASG,kBAAT,CAA6BC,KAA7B,EAAiD;AACtD,SAAO;AACLH,IAAAA,IAAI,EAAEL,WAAW,CAACS,oBADb;AAELD,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,aAAT,GAAoC;AACzC,SAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBV,KAAK,CAACW,GAAN,CAAUV,UAAU,CAACW,WAArB,CAFpB;;AAAA;AAAA;AAEKC,YAAAA,IAFL,oBAEKA,IAFL;AAIHH,YAAAA,QAAQ,CAACR,oBAAoB,CAACW,IAAD,CAArB,CAAR;AAJG;AAAA;;AAAA;AAAA;AAAA;AAMHH,YAAAA,QAAQ,CAACJ,kBAAkB,aAAnB,CAAR;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD","sourcesContent":["import actionTypes from './action-types'\r\nimport axios from 'axios'\r\nimport serverUrls from '../../constants/serverUrls'\r\nimport Action from './actionInterface'\r\nimport { AppThunk } from '../reducers'\r\nimport { AppDispatch } from '../configureStore'\r\nimport { scheduleInterface } from '../../interfaces/interfaces'\r\n\r\nexport function loadSchedulesSuccess (schedules: [scheduleInterface]): Action {\r\n  return {\r\n    type: actionTypes.LOAD_SCHEDULES,\r\n    schedules\r\n  }\r\n}\r\n\r\nexport function loadSchedulesError (error: any): Action {\r\n  return {\r\n    type: actionTypes.LOAD_SCHEDULES_ERROR,\r\n    error\r\n  }\r\n}\r\n\r\nexport function loadSchedules (): AppThunk {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      const { data } = await axios.get(serverUrls.scheduleUrl)\r\n\r\n      dispatch(loadSchedulesSuccess(data))\r\n    } catch (error) {\r\n      dispatch(loadSchedulesError(error))\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}