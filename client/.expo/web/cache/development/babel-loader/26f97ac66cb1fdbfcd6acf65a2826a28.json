{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport actionTypes from \"./action-types\";\nimport axios from 'axios';\nimport serverUrls from \"../../constants/serverUrls\";\nexport function loadWorkoutSuccess(workout) {\n  return {\n    type: actionTypes.LOAD_WORKOUT,\n    workout: workout\n  };\n}\nexport function loadWorkoutError(error) {\n  return {\n    type: actionTypes.LOAD_WORKOUT_ERROR,\n    error: error\n  };\n}\nexport function loadWorkout(date) {\n  return function _callee(dispatch) {\n    var _await$axios$get, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(serverUrls.workoutUrl + \"/\" + date));\n\n          case 3:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            dispatch(loadWorkoutSuccess(data));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(loadWorkoutError(_context.t0));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n}\nexport function updateWorkoutSuccess(workout) {\n  return {\n    type: actionTypes.UPDATE_WORKOUT,\n    workout: workout\n  };\n}\nexport function updateWorkoutError(error) {\n  return {\n    type: actionTypes.UPDATE_WORKOUT_ERROR,\n    error: error\n  };\n}\nexport function updateWorkout(date, updatedDescription, updatedTitle, updatedType) {\n  return function _callee2(dispatch) {\n    var _await$axios$patch, data;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.patch(serverUrls.workoutUrl + \"/\" + date, {\n              updatedDescription: updatedDescription,\n              updatedTitle: updatedTitle,\n              updatedType: updatedType\n            }));\n\n          case 3:\n            _await$axios$patch = _context2.sent;\n            data = _await$axios$patch.data;\n            dispatch(updateWorkoutSuccess(data));\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(updateWorkoutError(_context2.t0));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n}","map":{"version":3,"sources":["E:/Javier/Visual Studio projects/javi-final-project/client/src/redux/actions/workoutActions.ts"],"names":["actionTypes","axios","serverUrls","loadWorkoutSuccess","workout","type","LOAD_WORKOUT","loadWorkoutError","error","LOAD_WORKOUT_ERROR","loadWorkout","date","dispatch","get","workoutUrl","data","updateWorkoutSuccess","UPDATE_WORKOUT","updateWorkoutError","UPDATE_WORKOUT_ERROR","updateWorkout","updatedDescription","updatedTitle","updatedType","patch"],"mappings":";AAAA,OAAOA,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AAMA,OAAO,SAASC,kBAAT,CAA6BC,OAA7B,EAAgE;AACrE,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACM,YADb;AAELF,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAED,OAAO,SAASG,gBAAT,CAA2BC,KAA3B,EAA+C;AACpD,SAAO;AACLH,IAAAA,IAAI,EAAEL,WAAW,CAACS,kBADb;AAELD,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,WAAT,CAAsBC,IAAtB,EAA8C;AACnD,SAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBX,KAAK,CAACY,GAAN,CAAaX,UAAU,CAACY,UAAxB,SAAsCH,IAAtC,CAFpB;;AAAA;AAAA;AAEKI,YAAAA,IAFL,oBAEKA,IAFL;AAIHH,YAAAA,QAAQ,CAACT,kBAAkB,CAACY,IAAD,CAAnB,CAAR;AAJG;AAAA;;AAAA;AAAA;AAAA;AAMHH,YAAAA,QAAQ,CAACL,gBAAgB,aAAjB,CAAR;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD;AAED,OAAO,SAASS,oBAAT,CAA+BZ,OAA/B,EAAkE;AACvE,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACiB,cADb;AAELb,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAED,OAAO,SAASc,kBAAT,CAA6BV,KAA7B,EAAiD;AACtD,SAAO;AACLH,IAAAA,IAAI,EAAEL,WAAW,CAACmB,oBADb;AAELX,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASY,aAAT,CACLT,IADK,EAELU,kBAFK,EAGLC,YAHK,EAILC,WAJK,EAKL;AACA,SAAO,kBAAOX,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBX,KAAK,CAACuB,KAAN,CAClBtB,UAAU,CAACY,UADO,SACOH,IADP,EAErB;AACEU,cAAAA,kBAAkB,EAAlBA,kBADF;AAEEC,cAAAA,YAAY,EAAZA,YAFF;AAGEC,cAAAA,WAAW,EAAXA;AAHF,aAFqB,CAFpB;;AAAA;AAAA;AAEKR,YAAAA,IAFL,sBAEKA,IAFL;AAWHH,YAAAA,QAAQ,CAACI,oBAAoB,CAACD,IAAD,CAArB,CAAR;AAXG;AAAA;;AAAA;AAAA;AAAA;AAaHH,YAAAA,QAAQ,CAACM,kBAAkB,cAAnB,CAAR;;AAbG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAgBD","sourcesContent":["import actionTypes from './action-types'\r\nimport axios from 'axios'\r\nimport serverUrls from '../../constants/serverUrls'\r\nimport Action from './actionInterface'\r\nimport { AppThunk } from '../reducers'\r\nimport { AppDispatch } from '../configureStore'\r\nimport { workoutInterface } from '../../interfaces/interfaces'\r\n\r\nexport function loadWorkoutSuccess (workout: workoutInterface): Action {\r\n  return {\r\n    type: actionTypes.LOAD_WORKOUT,\r\n    workout\r\n  }\r\n}\r\n\r\nexport function loadWorkoutError (error: any): Action {\r\n  return {\r\n    type: actionTypes.LOAD_WORKOUT_ERROR,\r\n    error\r\n  }\r\n}\r\n\r\nexport function loadWorkout (date: string): AppThunk {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      const { data } = await axios.get(`${serverUrls.workoutUrl}/${date}`)\r\n\r\n      dispatch(loadWorkoutSuccess(data))\r\n    } catch (error) {\r\n      dispatch(loadWorkoutError(error))\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateWorkoutSuccess (workout: workoutInterface): Action {\r\n  return {\r\n    type: actionTypes.UPDATE_WORKOUT,\r\n    workout\r\n  }\r\n}\r\n\r\nexport function updateWorkoutError (error: any): Action {\r\n  return {\r\n    type: actionTypes.UPDATE_WORKOUT_ERROR,\r\n    error\r\n  }\r\n}\r\n\r\nexport function updateWorkout (\r\n  date: string,\r\n  updatedDescription?: string,\r\n  updatedTitle?: string,\r\n  updatedType?: string\r\n) {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      const { data } = await axios.patch(\r\n        `${serverUrls.workoutUrl}/${date}`,\r\n        {\r\n          updatedDescription,\r\n          updatedTitle,\r\n          updatedType\r\n        }\r\n      )\r\n\r\n      dispatch(updateWorkoutSuccess(data))\r\n    } catch (error) {\r\n      dispatch(updateWorkoutError(error))\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}